<?php

namespace Legrisch\StatamicEnhancedGraphql\Queries;

use GraphQL\Type\Definition\Type;
use Statamic\Facades\Entry;
use Statamic\Facades\GraphQL;
use Statamic\GraphQL\Middleware\ResolvePage;
use Statamic\GraphQL\Types\JsonArgument;
use Statamic\Support\Str;
use Statamic\GraphQL\Queries\Query;
use Statamic\GraphQL\Queries\Concerns\FiltersQuery;

class CLASS_NAME extends Query
{
  use FiltersQuery;

  protected $attributes = [
    'name' => 'QUERY_NAME',
  ];

  protected $middleware = [
    ResolvePage::class,
  ];

  public function type(): Type
  {
    return GraphQL::nonNull(GraphQL::paginate(GraphQL::type("TYPE_NAME!")));
  }

  public function args(): array
  {
    return [
      'limit' => GraphQL::int(),
      'page' => GraphQL::int(),
      'filter' => GraphQL::type(JsonArgument::NAME),
      'sort' => GraphQL::listOf(GraphQL::string()),
    ];
  }

  public function resolve($root, $args)
  {
    $query = Entry::query();

    $query->where('collection', "COLLECTION_HANDLE");

    $this->filterQuery($query, $args['filter'] ?? []);

    $this->sortQuery($query, $args['sort'] ?? []);

    return $query->paginate($args['limit'] ?? 1000);
  }

  private function sortQuery($query, $sorts)
  {
    if (empty($sorts)) {
      $sorts = ['id'];
    }

    foreach ($sorts as $sort) {
      $order = 'asc';

      if (Str::contains($sort, ' ')) {
        [$sort, $order] = explode(' ', $sort);
      }

      $query->orderBy($sort, $order);
    }
  }
}
